#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
 * Copyright 2016 Charles University in Prague
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
"""

"""
Generates files with tabulated quantiles Student's t-distribution for alphas given on the command line.

Usage: gen_ttable <alpha 1> ... <alpha n>

If no alphas are given on the command line, it generates the table for: 0.005, 0.00625, 0.001, 0.0125, 0.025, 0.05

Example: gen_ttable 0.0125 0.025 0.05

"""

import numpy as np
from scipy.stats import t
import sys
import re


minorCount = 100
boost = 3


def getLimits(dfMax):
	base = 0
	for majorIdx in xrange(0, sys.maxint):
		minorStep = (1 << majorIdx * boost)
		base += minorStep * minorCount

		if base >= dfMax:
			break

	return (base, (majorIdx + 1) * minorCount)


dfMax, idfTableSize = getLimits(1e9)


def getICDFTable(alpha):
	icdf = np.zeros((1, minorCount))
	base = 0
	for majorIdx in xrange(0, sys.maxint):
		minorStep = (1 << majorIdx * boost)
		for minorIdx in xrange(0, minorCount):
			df = (minorIdx + 1) * minorStep + base
			icdf[majorIdx, minorIdx] = t.ppf(alpha, df)

		base += minorStep * minorCount

		if base >= dfMax:
			break

		icdf.resize((majorIdx + 2, minorCount))
		
	return icdf.reshape((-1))

print 'Generation started ...'
	
alphas = [float(alphaStr) for alphaStr in sys.argv[1:]]
if len(alphas) == 0:
	alphas = [0.005, 0.00625, 0.001, 0.0125, 0.025, 0.05]


out = open('../src/TTable.cpp', 'w')
out.write('''/*
 * TTable.cpp
 * Generated by gen_ttable.py
 *
 * Quantiles of the Student's t-distribution
 */

#include "TTable.h"

const int ttable_minor_count = {0};
const int ttable_boost = {1};
const int ttable_df_max = {2};

const double ttable_icdf[{3}][{4}] = {{
{5}
}};
'''.format(
	minorCount, 	boost, dfMax,
	len(alphas), idfTableSize, 
	',\n\n'.join( ['\t{' + ','.join([str(val) for val in getICDFTable(alpha)]) + '}' for alpha in alphas] )
))
out.close()

dotToUnderscore = re.compile('\.')

out = open('../src/TTable.h', 'w')
out.write('''/*
 * TTable.h
 * Generated by gen_ttable.py
 *
 * Header file for quantiles of the Student's t-distribution
 */

#ifndef TTABLE_H_
#define TTABLE_H_

enum ALPHAS {{{0}}};

extern const int ttable_minor_count;
extern const int ttable_boost;
extern const int ttable_df_max;

extern const double ttable_icdf[{1}][{2}];

#endif /* TTABLE_H_ */
'''.format(
	', '.join(['ALPHA_' + dotToUnderscore.sub('_', str(alpha)) for alpha in alphas]),
	len(alphas), idfTableSize
))
out.close()

print 'done.'
